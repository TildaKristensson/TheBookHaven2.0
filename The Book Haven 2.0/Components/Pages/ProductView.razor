
@page "/products"
@using TheBookHaven2.ApiService
@using TheBookHaven2.Models
@inject ProductApiService ProductApiService
@inject OrderApiService OrderApiService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer


<style>
	.cart-dropdown {
	z-index: 1050;
	position: relative

	}
</style>

<div class="container mt-4">
	<div class="row mb-4">
		<div class="col">
			<h1 class="display-4">Product Catalog</h1>
		</div>
	</div>

	<div class="cart-container position-absolute top-0 end-0 p-5 mt-5 me-3">
		<button class="btn btn-outline-primary position-relative" @onclick="ToggleCart">
			<i class="bi bi-cart"></i> Cart
			<span class="badge bg-danger position-absolute top-0 start-100 translate-middle">
				@Cart.Count
			</span>
		</button>
		@if (IsCartOpen)
		{
			<div class="cart-dropdown bg-white border rounded p-3 shadow">
				<h5 class="mb-3">Shopping Cart</h5>
				<ul class="list-unstyled">
					@foreach (var item in Cart)
					{
						<li class="d-flex justify-content-between align-items-center">
							<span>@item.Title - @item.Price.ToString("C")</span>
							<button class="btn btn-sm btn-outline-danger" @onclick="() => RemoveFromCart(item)">
								<i class="bi bi-x-lg"></i>
							</button>
						</li>
					}
				</ul>
				<div class="border-top pt-2">
					<strong>Total: @Cart.Sum(item => item.Price).ToString("C")</strong>
				</div>
				<button class="brn btn-success w-100 mt-2" @onclick="PlaceOrder">Place Order</button>
				<button class="btn btn-dark w-50 mt-2" @onclick="CloseCart">Close</button>
			</div>
		}
	</div>

	<div class="row mb-4 justify-content-center">
		<div class="col-md-4 mb-2">
			<input type="text" class="form-control" placeholder="Search by Author" @bind="AuthorName" />
		</div>
		<div class="col-md-4 mb-2">
			<input type="text" class="form-control" placeholder="Search by Title" @bind="SearchTerm"/>
		</div>
		<div class="col-md-3">
			<button class="btn btn-primary w-100" @onclick="Search">Search</button>
		</div>
		<div class="col-md-3">
			<button class="btn btn-outline-primary w-100" @onclick="ShowAvailableProductsOnly">
				@(ShowOnlyAvailable ? "Show All" : "Available Only")
			</button>
		</div>
	</div>



	@if (IsLoading)
	{
		<div class="text-center">
			<div class="spinner-border text-primary" role="status">
				<span class="sr-only">Loading...</span>
			</div>
		</div>
	}
	else if (Products == null || !Products.Any())
	{
		<div class="alert alert-info">No products found.</div>
	}
	else
	{
		<div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
			@foreach (var product in Products)
			{
				<div class="col">
					<div class="card h-100 shadow-sm">
						<div class="card-header bg-light">
							<h5 class="card-title mb-0 text-truncate">@product.Title</h5>
						</div>
						<div class="card-body">
							<p class="card-text"><strong>Author:</strong> @product.Author</p>
							<p class="card-text"><strong>ISBN:</strong> @product.ISBN</p>
							<p class="card-text"><strong>Category:</strong> @product.Category</p>
							<p class="card-text"><strong>Price:</strong> @product.Price.ToString("C")</p>
							<p class="card-text">
								<span class="badge @(product.IsAvailable ? "bg-success" : "bg-danger")">
									@(product.IsAvailable ? "In Stock" : "Out of Stock")
								</span>
							</p>
							<p class="card-text"><strong>Description:</strong> @product.Description</p>
						</div>
						<div class="card-footer d-flex justify-content-between">
							<button class="btn btn-sm btn-outline-primary me-2" @onclick="() => AddToCart(product)">Add to cart</button>
							<button class="btn btn-sm btn-outline-primary me-2" @onclick="() => OpenEditModal(product)">Edit</button>
							<button class="btn btn-sm btn-outline-primary me-2" @onclick="() => OpenSafetyDeleteModal(product)">Delete</button>
						</div>
					</div>
				</div>
			}
		</div>

		<div class="d-flex justify-content-center mt-4">
			<button class="btn btn-success" @onclick="AddNewProduct">Add new product</button>
		</div>
	}
</div>

@if (IsDeleteModalOpen && SelectedProduct != null)
{
	<div class="modal fade show d-block" tabindex="-1" style="background: rgba(0, 0, 0, 0.5);">
		<div class="modal-dialog">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title">Delete product: @SelectedProduct.Title</h5>
					<button type="button" class="btn-close" @onclick="CloseSafetyDeleteModal"></button>
				</div>
				<div class="modal-body">
					<p>Are you sure you want to delete this product?</p>
				</div>
				<div class="modal-footer">
					<button class="btn btn-secondary" @onclick="CloseSafetyDeleteModal">Cancel</button>
					<button class="btn btn-danger" @onclick="DeleteProduct">Delete</button>
				</div>
			</div>
		</div>
	</div>
}

@if (IsEditModalOpen && SelectedProduct != null)
{
	<div class="modal fade show d-block" tabindex="-1" style="background: rgba(0, 0, 0, 0.5);">
		<div class="modal-dialog">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title">Edit product: @SelectedProduct.Title</h5>
					<button type="button" class="btn-close" @onclick="CloseEditModal"></button>
				</div>
				<div class="modal-body">
					<EditForm Model="SelectedProduct" OnValidSubmit="HandleEditSubmit">
						<DataAnnotationsValidator />
						<ValidationSummary />

						<div class="mb-3">
							<label for="title" class="form-label">Title</label>
							<InputText id="title" class="form-control" @bind-Value="SelectedProduct.Title" />
						</div>
						<div class="mb-3">
							<label for="author" class="form-label">Author</label>
							<InputText id="author" class="form-control" @bind-Value="SelectedProduct.Author" />
						</div>
						<div class="mb-3">
							<label for="isbn" class="form-label">ISBN</label>
							<InputText id="isbn" class="form-control" @bind-Value="SelectedProduct.ISBN" />
						</div>
						<div class="mb-3">
							<label for="category" class="form-label">Category</label>
							<InputText id="category" class="form-control" @bind-Value="SelectedProduct.Category" />
						</div>
						<div class="mb-3">
							<label for="price" class="form-label">Price</label>
							<InputNumber id="price" class="form-control" @bind-Value="SelectedProduct.Price" />
						</div>
						<div class="mb-3">
							<label for="description" class="form-label">Description</label>
							<InputTextArea id="description" class="form-control" @bind-Value="SelectedProduct.Description" />
						</div>
						<div class="mb-3 d-flex">
							<label for="isAvailable" class="form-label">In Stock</label>
							<InputCheckbox id="IsAvailable" class="form-check-input larger-checkbox" @bind-Value="SelectedProduct.IsAvailable" />
						</div>
					</EditForm>
				</div>
				<div class="modal-footer">
					<button class="btn btn-secondary" @onclick="CloseEditModal">Cancel</button>
					<button class="btn btn-primary" @onclick="() => UpdateProduct()">Save changes</button>
				</div>
			</div>
		</div>
	</div>
}


@code {
	private List<Product> Products { get; set; } = new();
	private List<Product> AllProducts { get; set; }
	private bool IsLoading { get; set; } = true;
	private string? SearchTerm { get; set; } 
	private string? AuthorName { get; set; } 
	private string ISBN { get; set; } = "";
	private bool ShowOnlyAvailable { get; set; } = false;
	private Product? SelectedProduct { get; set; }
	private List<Product> Cart { get; set; } = new();
	private bool IsCartOpen { get; set; } = false;
	private bool IsDeleteModalOpen { get; set; } = false;
	private bool IsEditModalOpen { get; set; } = false;


	protected override async Task OnInitializedAsync()
	{
		await LoadProducts();
	}

	private async Task LoadProducts()
	{
		IsLoading = true;

		try
		{
			Products = await ProductApiService.GetAllProductsAsync();
		}
		catch (Exception ex)
		{
			Console.Error.WriteLine($"Error loading products: {ex.Message}");
		}
		finally
		{
			IsLoading = false;
		}
	}


	private async Task Search()
	{
		IsLoading = true;
		try
		{
			if (string.IsNullOrWhiteSpace(SearchTerm) && string.IsNullOrWhiteSpace(AuthorName))
			{
				Products = await ProductApiService.GetAllProductsAsync();

			}
			else
			{
				Products = await ProductApiService.SearchProductsAsync(SearchTerm, AuthorName);
			}

			if (ShowOnlyAvailable)
			{
				Products = Products.Where(p => p.IsAvailable).ToList();
			}
		}
		catch (Exception ex)
		{
			Console.Error.WriteLine($"Error searching products: {ex.Message}");
		}
		finally
		{
			IsLoading = false;
		}
	}


	private void HandleKeyPress(KeyboardEventArgs e)
	{
		if (e.Key == "Enter")
		{
			Search();
		}
	}

	private async Task ShowAvailableProductsOnly()
	{
		ShowOnlyAvailable = !ShowOnlyAvailable;

		if (ShowOnlyAvailable)
		{
			IsLoading = true;

			try
			{
				Products = await ProductApiService.GetAvailableProductsAsync();
			}
			catch (Exception ex)
			{
				Console.Error.WriteLine($"Error loading available products: {ex.Message}");
			}
			finally
			{
				IsLoading = false;
			}
		}
		else
		{
			await LoadProducts();
		}
	}

	private void AddNewProduct()
	{
		NavigationManager.NavigateTo("/product/new");
	}

	private void OpenSafetyDeleteModal(Product product)
	{
		SelectedProduct = product;
		IsDeleteModalOpen = true;
	}

	private void CloseSafetyDeleteModal()
	{
		IsDeleteModalOpen = false;
		SelectedProduct = null;
	}

	private async Task DeleteProduct()
	{ 
		if (SelectedProduct != null)
		{
			await ProductApiService.DeleteProductAsync(SelectedProduct.Id);
			Products.Remove(SelectedProduct);
			CloseSafetyDeleteModal();
		}

	}

	private void OpenEditModal(Product product)
	{
		SelectedProduct = product;
		IsEditModalOpen = true;
	}

	private void CloseEditModal()
	{
		IsEditModalOpen = false;
		SelectedProduct = null;
	}

	private void HandleEditSubmit()
	{
		UpdateProduct();
	}

	private async Task UpdateProduct()
	{
		if (SelectedProduct != null)
		{
			try
			{
				await ProductApiService.UpdateProductAsync(SelectedProduct.Id, SelectedProduct);
				await LoadProducts();
				CloseEditModal();
			}
			catch (Exception ex)
			{
				Console.Error.WriteLine($"Error updating product: {ex.Message}");
			}
		}
	}

	private void ToggleCart()
	{
		IsCartOpen = !IsCartOpen;
	}

	private void AddToCart(Product product)
	{
		Cart.Add(product);
		IsCartOpen = true;
	}

	private async Task PlaceOrder()
	{
		int placeHolderCustomerId = 1;

		var order = new Order
			{
				CustomerId = placeHolderCustomerId,
				OrderDetails = Cart.Select(p => new OrderDetails
				{
					ProductId = p.Id,
					Quantity = 1,
					TotalPrice = p.Price
				}).ToList(),
				OrderDate = DateTime.Now
			};

		await OrderApiService.CreateOrderAsync(order);
		Cart.Clear();
	}

	private void CloseCart()
	{
		IsCartOpen = false;
	}

	private void RemoveFromCart(Product product)
	{
		Cart.Remove(product);
	}
}
