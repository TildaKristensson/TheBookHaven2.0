@page "/orders"
@rendermode InteractiveServer
@using TheBookHaven2.ApiService
@using TheBookHaven2.Models
@using TheBookHaven2.DTO
@using System.ComponentModel.DataAnnotations
@inject OrderApiService OrderApiService
@inject NavigationManager NavigationManager

<PageTitle>Orders</PageTitle>

<div class="container mt-4">
	<div class="row mb-4">
		<div class="col d-flex justify-content-center">
			<div class="p-4"
			style="background: linear-gradient(180deg, #f8a89d 0%, #f4b8a2 70%); border-radius: 10px; box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1); width: 1000px; display: flex; flex-direction: column; align-items: center;">
				<h1 class="display-5 fw-bold text-white" style="font-family: 'Roboto', sans-serif;">Order collection</h1>
				<p class="lead text-white" style="font-family: 'Poppins', sans-serif;">See what orders have previously been placed!</p>
			</div>
		</div>
	</div>
</div>

@if (isLoading)
{
    <div class="text-center">
        <div class="spinner-border text-primary" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
}
else if (customerOrders == null || !customerOrders.Any())
{
    <div class="alert alert-info">No customer orders found.</div>
}
else
{
    <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
        @foreach (var customerOrder in customerOrders)
        {
            <div class="col">
                <div class="card h-100 shadow-sm">
                    <div class="card-header bg-light">
                        <h5 class="card-title mb-0 text-truncate">@($"{customerOrder.FirstName} {customerOrder.LastName}")</h5>
                    </div>
                    <div class="card-body">
                        <p class="card-text"><strong>Customer Id:</strong> @customerOrder.CustomerId</p>

                        @foreach (var order in customerOrder.Orders)
                        {
                            <h6 class="mt-2">Order #@order.OrderId</h6>
                            <ul class="list-group">
                                @foreach (var product in order.Products)
                                {
                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                        @product.Title
                                        <span class="badge bg-secondary">x @product.Quantity</span>
                                    </li>
                                }
                            </ul>
                        }
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
	private List<CustomerOrdersDTO> customerOrders;
	private bool isLoading { get; set; }
	

	protected override async Task OnInitializedAsync()
	{
		await GetCustomerOrders();
	}

	public async Task GetCustomerOrders()
	{
		isLoading = true;

		try
		{
			customerOrders = await OrderApiService.GetCustomerOrdersAsync();
		}
		catch (Exception ex)
		{
			Console.Error.WriteLine($"Error loading customer orders {ex:message}");
		}
		finally
		{
			isLoading = false;
		}

	}
}
